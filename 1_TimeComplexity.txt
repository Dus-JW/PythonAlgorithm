1. 시간, 공간복잡도

문제에 대한 풀이를 생각한 이후, 해당 풀이가 시간 제한/ 메모리 제한을 통과할 수 있을 지를 파악해야한다.

웬만하면 시간 제한은 1~5초, 메모리 제한은 128~512mb라고 생각하면 된다.

Big-O notation : 빅오 표기법 > 합수의 결과값을 시간 복잡도에서 가장 큰 지수승만 남겨서 나타내는 방법

2. 공간 복잡도란?

공간 복잡도 = 입력의 크기와 문제를 해결하는데 걸리는 공간의 상관관계

# 512MB가 int변수를 대략 1.2억개 정도 담을 수 있다는 개념을 가지는게 좋다.

# 컴퓨터는 1 초에 대략 1~3억개의 연산을 수행할 수 있다.

그렇기에, 문제에서 주어진 input의 범위를 보고 어느 정도의 시간복잡도까지 통과될 수 있는지를 잘 파악해야 한다.

3. N의 크기에 따른 허용 시간 복잡도 (대략적으로)

n <= 11 : O (N!)
n <= 20 : O (2^N)
n <= 100 : O (N^4)
n <= 500 : O (N^3)
n <= 3000 : O (N^2 * log N)
n <= 5000 : O (N^2)
n <= 1,000,000 : O (N * log N)
n <= 10,000,000 : O (N)

4. 표준 입출력

코딩테스트에서 입력과 출력은 표준 입출력을 사용한다.

c++ => cin과 cout을 통해 입력과 출력을 수행한다.

그러나 cin의 경우 공백을 포함한 문자열을 제대로 입력받지 못하기에

getline (cin, s)등과 같은 방법으로 문자열을 제대로 입력받을 수 있다.

또한, cin, cout을 사용할 때에는 시간초과 방지를 위해 반드시 2가지 명령을 실행시켜야 한다.

- ios::sync_with_stdio(0);
- cin.tie(0);

ios::sync_with_stdio(0)은 C++ stream과 C stream 사이의 sync를 끄는 명령이다.
예를 들어, printf와 cout을 섞어서 사용한다면, 기본적으로 출력 순서를 유지할 수 있도록 C++과 C stream 사이의 sync를 유지하고 있다.

하지만 cout만 사용하게 될 경우 의미없이 시간 낭비를 없애주기 위하여 sync을 꺼야한다. but, 해당 명령을 실행한 이후에는 반드시 cout만 사용해야 한다.

